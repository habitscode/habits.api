service: habits-api
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore2.1
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"

package:
  artifact: bin/release/netcoreapp2.1/HabitsEngine.zip

functions:
  get-teams:
    handler: HabitsEngine::Habits.API.TeamHandler::GetAll
    events:
      - http:
          path: api/teams
          method: get
          # authorizer:
          #   name: authorizer
          #   arn: arn:aws:cognito-idp:us-west-2:640097525811:userpool/us-west-2_DyfHujw5j
  get-team:
    handler: HabitsEngine::Habits.API.TeamHandler::Get
    events:
      - http:
          path: api/teams/{teamId}
          method: get
          request:
            parameters:
              paths:
                teamId: true
  post-team:
    handler: HabitsEngine::Habits.API.TeamHandler::Add
    events:
      - http:
          path: api/teams
          method: post
  put-team:
    handler: HabitsEngine::Habits.API.TeamHandler::Update
    events:
      - http:
          path: api/teams
          method: put
  delete-team:
    handler: HabitsEngine::Habits.API.TeamHandler::Delete
    events:
      - http:
          path: api/teams/{teamId}
          method: delete
          request:
            parameters:
              paths:
                teamId: true
  get-habits:
    handler: HabitsEngine::Habits.API.HabitHandler::GetAll
    events:
      - http:
          path: api/teams/{teamId}/habits
          method: get
          request:
            parameters:
              paths:
                teamId: true
  get-habit:
    handler: HabitsEngine::Habits.API.HabitHandler::Get
    events:
      - http:
          path: api/teams/{teamId}/habits/{habitId}
          method: get
          request:
            parameters:
              paths:
                teamId: true
                habitId: true
  post-habit:
    handler: HabitsEngine::Habits.API.HabitHandler::Add
    events:
      - http:
          path: api/teams/{teamId}/habits
          method: post
          request:
            parameters:
              paths:
                teamId: true
  put-habit:
    handler: HabitsEngine::Habits.API.HabitHandler::Update
    events:
      - http:
          path: api/teams/{teamId}/habits
          method: put
          request:
            parameters:
              paths:
                teamId: true
  delete-habit:
    handler: HabitsEngine::Habits.API.HabitHandler::Delete
    events:
      - http:
          path: api/teams/{teamId}/habits/{habitId}
          method: delete
          request:
            parameters:
              paths:
                teamId: true
                habitId: true
  get-tasks:
    handler: HabitsEngine::Habits.API.TaskHandler::GetAll
    events:
      - http:
          path: api/habits/{habitId}/tasks
          method: get
          request:
            parameters:
              paths:
                habitId: true
  get-task:
    handler: HabitsEngine::Habits.API.TaskHandler::Get
    events:
      - http:
          path: api/habits/{habitId}/tasks/{taskId}
          method: get
          request:
            parameters:
              paths:
                habitId: true
                taskId: true
  post-task:
    handler: HabitsEngine::Habits.API.TaskHandler::Add
    events:
      - http:
          path: api/habits/{habitId}/tasks
          method: post
          request:
            parameters:
              paths:
                habitId: true
  put-task:
    handler: HabitsEngine::Habits.API.TaskHandler::Update
    events:
      - http:
          path: api/habits/{habitId}/tasks
          method: put
          request:
            parameters:
              paths:
                habitId: true
  delete-task:
    handler: HabitsEngine::Habits.API.TaskHandler::Delete
    events:
      - http:
          path: api/habits/{habitId}/tasks/{taskId}
          method: delete
          request:
            parameters:
              paths:
                habitId: true
                taskId: true
# resources:
#   Resources:
#     CognitoUserPool:
#       Type: "AWS::Cognito::UserPool"
#       Properties:
#         MfaConfiguration: OFF
#         UserPoolName: habits-user-pool
#         UsernameAttributes:
#           - email
#         Policies:
#           PasswordPolicy:
#             MinimumLength: 6
#     CognitoUserPoolClient:
#       Type: "AWS::Cognito::UserPoolClient"
#       Properties:
#         ClientName: habits-user-pool-client
#         GenerateSecret: False
#         UserPoolId:
#           Ref: CognitoUserPool
#     ApiGatewayAuthorizer:
#       DependsOn:
#         - ApiGatewayRestApi
#       Type: AWS::ApiGateway::Authorizer
#       Properties:
#         Name: cognito-authorizer
#         IdentitySource: method.request.header.Authorization
#         RestApiId:
#           Ref: ApiGatewayRestApi
#         Type: COGNITO_USER_POOLS
#         ProviderARNs:
#           - Fn::GetAtt: [CognitoUserPool, Arn]