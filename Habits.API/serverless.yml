service: habits-api
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore2.1
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"

package:
  individually: true

functions:
  get-teams:
    handler: HabitsEngine::Habits.API.TeamHandler::GetAll
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams
          method: get
  get-team:
    handler: HabitsEngine::Habits.API.TeamHandler::Get
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams/{teamId}
          method: get
          request:
            parameters:
              paths:
                teamId: true
  post-team:
    handler: HabitsEngine::Habits.API.TeamHandler::Add
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams
          method: post
  put-team:
    handler: HabitsEngine::Habits.API.TeamHandler::Update
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams
          method: put
  delete-team:
    handler: HabitsEngine::Habits.API.TeamHandler::Delete
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams/{teamId}
          method: delete
          request:
            parameters:
              paths:
                teamId: true
  get-challenges:
    handler: HabitsEngine::Habits.API.ChallengeHandler::GetAll
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams/{teamId}/challenges
          method: get
          request:
            parameters:
              paths:
                teamId: true
  get-challenge:
    handler: HabitsEngine::Habits.API.ChallengeHandler::Get
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams/{teamId}/challenges/{challengeId}
          method: get
          request:
            parameters:
              paths:
                teamId: true
                challengeId: true
  post-challenge:
    handler: HabitsEngine::Habits.API.ChallengeHandler::Add
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams/{teamId}/challenges
          method: post
          request:
            parameters:
              paths:
                teamId: true
  put-challenge:
    handler: HabitsEngine::Habits.API.ChallengeHandler::Update
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams/{teamId}/challenges
          method: put
          request:
            parameters:
              paths:
                teamId: true
  delete-challenge:
    handler: HabitsEngine::Habits.API.ChallengeHandler::Delete
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/teams/{teamId}/challenges/{challengeId}
          method: delete
          request:
            parameters:
              paths:
                teamId: true
                challengeId: true
  get-tasks:
    handler: HabitsEngine::Habits.API.TaskHandler::GetAll
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/challenges/{challengeId}/tasks
          method: get
          request:
            parameters:
              paths:
                challengeId: true
  get-task:
    handler: HabitsEngine::Habits.API.TaskHandler::Get
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/challenges/{challengeId}/tasks/{taskId}
          method: get
          request:
            parameters:
              paths:
                challengeId: true
                taskId: true
  post-task:
    handler: HabitsEngine::Habits.API.TaskHandler::Add
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/challenges/{challengeId}/tasks
          method: post
          request:
            parameters:
              paths:
                challengeId: true
  put-task:
    handler: HabitsEngine::Habits.API.TaskHandler::Update
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/challenges/{challengeId}/tasks
          method: put
          request:
            parameters:
              paths:
                challengeId: true
  delete-task:
    handler: HabitsEngine::Habits.API.TaskHandler::Delete
    package:
      artifact: bin/release/netcoreapp2.1/HabitsEngine.zip
    events:
      - http:
          path: api/challenges/{challengeId}/tasks/{taskId}
          method: delete
          request:
            parameters:
              paths:
                challengeId: true
                taskId: true